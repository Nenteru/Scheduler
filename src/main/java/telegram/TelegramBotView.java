// telegram/TelegramBotView.java
package telegram;


import model.Event;
import presenter.MainPresenter;
import util.DateTimeUtils;
import view.MainView;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
import org.telegram.telegrambots.meta.api.objects.MessageEntity;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import dao.ScheduleDAO;
import dao.impl.GoogleCalendarDAO;
import dao.impl.UserNotAuthenticatedException;
import dao.EventDAO;
import dao.impl.SQLiteEventDAO;
import dao.AnalysisExportDAO;
import dao.impl.JsonAnalysisExportDAO;
import model.ScheduleAnalysis;

import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Set;

import service.TemplateService;
import util.MarkdownFormatter;
import config.AppConfig;
import service.ScheduleAnalysisService;
import service.impl.ScheduleAnalysisServiceImpl;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è MainView –¥–ª—è Telegram Bot.
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã.
 */
public class TelegramBotView extends TelegramLongPollingBot implements MainView {

    private String botToken; // –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
    private String botUsername; // Username –±–æ—Ç–∞
    private MainPresenter presenter; // –°—Å—ã–ª–∫–∞ –Ω–∞ Presenter
    private final TemplateService templateService;

    // ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    private Long currentChatId;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ScheduleDAO
    private ScheduleDAO scheduleDAO;

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
    private final Map<Long, UserState> userStates = new ConcurrentHashMap<>();
    private final Set<Long> adminChatIds = ConcurrentHashMap.newKeySet();

    private enum UserState {
        AWAITING_GOOGLE_CODE,
        AWAITING_TEMPLATE_TEXT
        // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    private static final String AVAILABLE_COMMANDS_HELP =
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n\n" +
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
            "üóì /list\\_events \\- –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" +
            "‚ûï /add\\_event \\- –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n" +
            "   –§–æ—Ä–º–∞—Ç: `<–Ω–∞–∑–≤–∞–Ω–∏–µ>;<–≥–≥–≥–≥\\-–º–º\\-–¥–¥T—á—á:–º–º>;<–≥–≥–≥–≥\\-–º–º\\-–¥–¥T—á—á:–º–º>;<–æ–ø–∏—Å–∞–Ω–∏–µ>;<–º–µ—Å—Ç–æ>`\n" +
            "‚è∞ /set\\_reminder\\_time \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
            "   –§–æ—Ä–º–∞—Ç: `<ID —Å–æ–±—ã—Ç–∏—è>;<–≥–≥–≥–≥\\-–º–º\\-–¥–¥T—á—á:–º–º>`\n" +
            "üîî /toggle\\_reminders \\- –≤–∫–ª/–≤—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è\n" +
            "   –§–æ—Ä–º–∞—Ç: `<ID —Å–æ–±—ã—Ç–∏—è> <on\\|off>`\n" +
            "üÜî /get\\_my\\_id \\- –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID \\(–¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥–∏–º\\)\n\n" +
            "*Google Calendar:*\n" +
            "üîó /connect\\_google\\_calendar \\- –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à Google Calendar\n" +
            "‚ùå /disconnect\\_google\\_calendar \\- –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–∞—à Google Calendar\n" +
            "üîÑ /sync\\_google \\- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar\n" +
            "üìã /list\\_google \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n" +
            "*–î–æ—Å—Ç—É–ø –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π:*\n" +
            "ü§ù /grant\\_view\\_access \\<ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\> \\- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n" +
            "üëÄ /list\\_observed\\_events \\<ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\> \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø\n\n" +
            "*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n" +
            "üîë /admin\\_login `\\<code\\>` \\- –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n" +
            "üìã /list\\_templates \\- \\(–ê–¥–º–∏–Ω\\) –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã\n" +
            "‚úèÔ∏è /set\\_template `\\<key\\> \\<text\\>` \\- \\(–ê–¥–º–∏–Ω\\) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω\n" +
            "üîÑ /reset\\_template `\\<key\\>` \\- \\(–ê–¥–º–∏–Ω\\) –°–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω\n" +
            "üîÑ /admin\\_logout \\- –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" +
            "üìä /get\\_analysis \\- –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏";


    public TelegramBotView(String botToken, String botUsername, TemplateService templateService) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.templateService = templateService;
        try {
            this.scheduleDAO = new GoogleCalendarDAO();
            setupBotCommands();
        } catch (Exception e) {
            System.err.println("[TelegramBotView] Error initializing Google Calendar DAO: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void setupBotCommands() {
        List<BotCommand> commands = new ArrayList<>();
        commands.add(new BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"));
        commands.add(new BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"));
        commands.add(new BotCommand("list_events", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"));
        commands.add(new BotCommand("add_event", "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"));
        commands.add(new BotCommand("set_reminder_time", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"));
        commands.add(new BotCommand("toggle_reminders", "–í–∫–ª/–≤—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è"));
        commands.add(new BotCommand("get_my_id", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID"));
        commands.add(new BotCommand("connect_google_calendar", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar"));
        commands.add(new BotCommand("disconnect_google_calendar", "–û—Ç–∫–ª—é—á–∏—Ç—å Google Calendar"));
        commands.add(new BotCommand("sync_google", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Calendar"));
        commands.add(new BotCommand("list_google", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar"));
        commands.add(new BotCommand("grant_view_access", "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"));
        commands.add(new BotCommand("list_observed_events", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ"));
        commands.add(new BotCommand("admin_login", "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"));
        commands.add(new BotCommand("list_templates", "(–ê–¥–º–∏–Ω) –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã"));
        commands.add(new BotCommand("set_template", "(–ê–¥–º–∏–Ω) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"));
        commands.add(new BotCommand("reset_template", "(–ê–¥–º–∏–Ω) –°–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω"));
        commands.add(new BotCommand("admin_logout", "–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"));
        commands.add(new BotCommand("get_analysis", "–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"));

        try {
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
            System.out.println("[TelegramBotView] Bot commands set successfully");
        } catch (TelegramApiException e) {
            System.err.println("[TelegramBotView] Error setting bot commands: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            currentChatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();
            System.out.println("[TelegramBotView] Received message from " + currentChatId + ": " + messageText);

            if (userStates.get(currentChatId) == UserState.AWAITING_GOOGLE_CODE) {
                handleGoogleAuthCode(messageText);
                return;
            }

            if (messageText.startsWith("/")) {
                handleCommand(messageText);
            } else {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("–í—ã —Å–∫–∞–∑–∞–ª–∏: " + messageText + "\\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."));
            }
        } else if (update.hasCallbackQuery()) {
            currentChatId = update.getCallbackQuery().getMessage().getChatId();
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleCommand(String commandText) {
        if (presenter == null) {
            sendMessage(currentChatId, "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.");
            return;
        }

        String command = commandText.split(" ")[0];
        String args = "";
        if (commandText.contains(" ")) {
            args = commandText.substring(commandText.indexOf(" ") + 1).trim();
        }

        switch (command) {
            case "/start":
                String welcomeText = templateService.getTemplate("start_welcome", "–ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç\\-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\\.");
                String additionalInfo = templateService.getTemplate("start_get_id_info", 
                    "\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\\), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get\\_my\\_id\\.");
                String welcomeMessage = String.format("*%s* üëã\n%s\n\n–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", 
                    welcomeText, additionalInfo);
                sendMessage(currentChatId, welcomeMessage);
                break;
            case "/help":
                String helpInfo = templateService.getTemplate("help", AVAILABLE_COMMANDS_HELP);
                sendMessage(currentChatId, helpInfo);
                break;
            case "/list_events":
                presenter.loadEvents(currentChatId);
                break;
            case "/connect_google_calendar":
                handleConnectGoogleCalendarCommand();
                break;
            case "/disconnect_google_calendar":
                handleDisconnectGoogleCalendarCommand();
                break;
            case "/sync_google":
                handleGoogleCalendarSync();
                break;
            case "/list_google":
                handleGoogleCalendarList();
                break;
            case "/add_event":
                handleAddEventCommand(args);
                break;
            case "/set_reminder_time":
                handleSetReminderTimeCommand(args);
                break;
            case "/toggle_reminders":
                handleToggleRemindersCommand(args);
                break;
            case "/grant_view_access":
                handleGrantViewAccessCommand(args);
                break;
            case "/list_observed_events":
                handleListObservedEventsCommand(args);
                break;
            case "/get_my_id":
                handleGetMyIdCommand();
                break;
            case "/admin_login":
                handleAdminLogin(args);
                break;
            case "/admin_logout":
                handleAdminLogout();
                break;
            case "/list_templates":
                handleListTemplates();
                break;
            case "/set_template":
                handleSetTemplateCommand(args);
                break;
            case "/reset_template":
                handleResetTemplateCommand(args);
                break;
            case "/get_analysis":
                handleGetAnalysisCommand();
                break;
            default:
                String unknownCommandText = templateService.getTemplate("unknown_command", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n");
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(unknownCommandText.replace("{command}", command)) + AVAILABLE_COMMANDS_HELP);
                break;
        }
    }

    private void handleAddEventCommand(String args) {
        if (args == null || args.trim().isEmpty()) {
            String helpText = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: " +
                "<–Ω–∞–∑–≤–∞–Ω–∏–µ>;<–≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º>;<–≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º>;<–æ–ø–∏—Å–∞–Ω–∏–µ>;<–º–µ—Å—Ç–æ>";
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(helpText));
            return;
        }
        if (presenter == null || currentChatId == null) return;
        try {
            String[] params = args.split(";", -1);
            if (params.length < 3) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("add_event_invalid_format", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ>;<–≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º>;<–≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º>;<–æ–ø–∏—Å–∞–Ω–∏–µ>;<–º–µ—Å—Ç–æ>")));
                return;
            }

            String title = params[0].trim();
            if (title.isEmpty()) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("add_event_title_empty", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")));
                return;
            }

            LocalDateTime startTime = LocalDateTime.parse(params[1].trim(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            LocalDateTime endTime = LocalDateTime.parse(params[2].trim(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);

            if (endTime.isBefore(startTime)) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("add_event_end_before_start", "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.")));
                return;
            }

            String description = params.length > 3 ? params[3].trim() : "";
            String location = params.length > 4 ? params[4].trim() : "";

            Event newEvent = new Event(null, title, description, startTime, endTime, location, null, currentChatId);

            presenter.addEvent(newEvent, currentChatId);

        } catch (DateTimeParseException e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("add_event_invalid_date", "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º. –ü—Ä–∏–º–µ—Ä: 2023-12-25T15:30")));
        } catch (Exception e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("add_event_error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: ") + e.getMessage()));
        }
    }

    private void handleSetReminderTimeCommand(String paramsString) {
        if (presenter == null || currentChatId == null) return;
        try {
            String[] params = paramsString.split(";", -1);
            if (params.length != 2) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("set_reminder_time_invalid_format", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_reminder_time <ID —Å–æ–±—ã—Ç–∏—è>;<–≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º> –∏–ª–∏ <ID —Å–æ–±—ã—Ç–∏—è>;null")));
                return;
            }

            String eventId = params[0].trim();
            if (eventId.isEmpty()) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("set_reminder_time_event_id_empty", "ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")));
                return;
            }

            String timeString = params[1].trim();
            LocalDateTime reminderTime = "null".equalsIgnoreCase(timeString) ? null : LocalDateTime.parse(timeString, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            presenter.setEventReminderTimeRequested(eventId, reminderTime, currentChatId);
        } catch (DateTimeParseException e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("set_reminder_time_invalid_date", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥T—á—á:–º–º –∏–ª–∏ 'null'.") + " –û—à–∏–±–∫–∞: " + e.getMessage()));
        } catch (Exception e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("set_reminder_time_error", "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ") + e.getMessage()));
        }
    }

    private void handleToggleRemindersCommand(String paramsString) {
        if (presenter == null || currentChatId == null) return;
        try {
            String[] params = paramsString.split(" ", 2);
            if (params.length != 2) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("toggle_reminders_invalid_format", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /toggle_reminders <ID —Å–æ–±—ã—Ç–∏—è> <on|off>")));
                return;
            }

            String eventId = params[0].trim();
            if (eventId.isEmpty()) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("toggle_reminders_event_id_empty", "ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")));
                return;
            }

            String toggleValue = params[1].trim();
            boolean enable;
            if ("on".equalsIgnoreCase(toggleValue)) {
                enable = true;
            } else if ("off".equalsIgnoreCase(toggleValue)) {
                enable = false;
            } else {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("toggle_reminders_invalid_value", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∫–ª/–≤—ã–∫–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on' –∏–ª–∏ 'off'.")));
                return;
            }
            presenter.toggleEventRemindersRequested(eventId, enable, currentChatId);
        } catch (Exception e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2(templateService.getTemplate("toggle_reminders_error", "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ") + e.getMessage()));
        }
    }

    private void handleConnectGoogleCalendarCommand() {
        if (currentChatId == null) return;
        if (scheduleDAO instanceof GoogleCalendarDAO) {
            GoogleCalendarDAO googleDAO = (GoogleCalendarDAO) scheduleDAO;
            try {
                String authUrl = googleDAO.getAuthorizationUrl(currentChatId, currentChatId.toString());
                userStates.put(currentChatId, UserState.AWAITING_GOOGLE_CODE);
                
                SendMessage message = new SendMessage();
                message.setChatId(currentChatId.toString());
                message.setParseMode(null);
                message.enableWebPagePreview();

                StringBuilder messageBuilder = new StringBuilder();
                messageBuilder.append("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar\n\n");
                messageBuilder.append("–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n");
                messageBuilder.append("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n");
                messageBuilder.append(authUrl).append("\n\n");
                messageBuilder.append("2. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –∫–æ–¥\n");
                messageBuilder.append("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏");
                
                message.setText(messageBuilder.toString());
                executeSendMessage(message);

            } catch (IOException e) {
                String errorMsg = String.format(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar: %s",
                    MarkdownFormatter.escapeMarkdownV2(e.getMessage())
                );
                sendMessage(currentChatId, errorMsg);
                System.err.println("[TelegramBotView] Error generating Google auth URL for user " + currentChatId + ": " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            sendMessage(currentChatId, "‚ùå –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            System.err.println("[TelegramBotView] scheduleDAO is not an instance of GoogleCalendarDAO in handleConnectGoogleCalendarCommand.");
        }
    }

    private void handleGoogleAuthCode(String code) {
        if (currentChatId == null) return;
        userStates.remove(currentChatId);

        if (scheduleDAO instanceof GoogleCalendarDAO) {
            GoogleCalendarDAO googleDAO = (GoogleCalendarDAO) scheduleDAO;
            try {
                googleDAO.exchangeCodeForTokens(currentChatId, code);
                sendMessage(currentChatId, "*‚úÖ Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω*");
            } catch (IOException e) {
                String errorMessage = String.format(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar: %s\n\n" +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /connect\\_google\\_calendar —Å–Ω–æ–≤–∞",
                    MarkdownFormatter.escapeMarkdownV2(e.getMessage())
                );
                sendMessage(currentChatId, errorMessage);
                System.err.println("[TelegramBotView] Error exchanging Google auth code for user " + currentChatId + ": " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            sendMessage(currentChatId, "‚ùå –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            System.err.println("[TelegramBotView] scheduleDAO is not an instance of GoogleCalendarDAO in handleGoogleAuthCode.");
        }
    }

    private void handleDisconnectGoogleCalendarCommand() {
        if (currentChatId == null) return;
        if (scheduleDAO instanceof GoogleCalendarDAO) {
            GoogleCalendarDAO googleDAO = (GoogleCalendarDAO) scheduleDAO;
            try {
                googleDAO.deleteTokens(currentChatId);
                sendMessage(currentChatId, "*‚úÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω*");
            } catch (IOException e) {
                String errorMsg = String.format(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Google Calendar: %s",
                    MarkdownFormatter.escapeMarkdownV2(e.getMessage())
                );
                sendMessage(currentChatId, errorMsg);
                System.err.println("[TelegramBotView] Error disconnecting Google Calendar for user " + currentChatId + ": " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            sendMessage(currentChatId, "‚ùå –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            System.err.println("[TelegramBotView] scheduleDAO is not an instance of GoogleCalendarDAO in handleDisconnectGoogleCalendarCommand.");
        }
    }

    private void handleGoogleCalendarSync() {
        if (scheduleDAO == null || currentChatId == null) {
            SendMessage message = new SendMessage();
            message.setChatId(currentChatId.toString());
            message.setParseMode(null);
            message.setText("–§—É–Ω–∫—Ü–∏—è Google Calendar –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
            executeSendMessage(message);
            System.err.println("[TelegramBotView] scheduleDAO is null in handleGoogleCalendarSync.");
            return;
        }
        if (!(scheduleDAO instanceof GoogleCalendarDAO)) {
            SendMessage message = new SendMessage();
            message.setChatId(currentChatId.toString());
            message.setParseMode(null);
            message.setText("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Google Calendar –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø DAO).");
            executeSendMessage(message);
            System.err.println("[TelegramBotView] scheduleDAO is not an instance of GoogleCalendarDAO in handleGoogleCalendarSync.");
            return;
        }

        SendMessage startMessage = new SendMessage();
        startMessage.setChatId(currentChatId.toString());
        startMessage.setParseMode(null);
        startMessage.setText("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Calendar...");
        executeSendMessage(startMessage);

        try {
            LocalDate today = LocalDate.now();
            List<Event> googleEvents = scheduleDAO.getEvents(today, today.plusYears(1), currentChatId);

            if (googleEvents.isEmpty()) {
                SendMessage emptyMessage = new SendMessage();
                emptyMessage.setChatId(currentChatId.toString());
                emptyMessage.setParseMode(null);
                emptyMessage.setText("‚ÑπÔ∏è –í –≤–∞—à–µ–º Google Calendar –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1 –≥–æ–¥ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã).");
                executeSendMessage(emptyMessage);
                return;
            }

            int syncedCount = 0;
            int skippedCount = 0;
            for (Event googleEvent : googleEvents) {
                googleEvent.setOwnerChatId(currentChatId); 
                try {
                    presenter.addEvent(googleEvent, currentChatId); 
                    syncedCount++;
                } catch (Exception e) { 
                    System.err.println("[TelegramBotView] Error adding synced event from Google: " + e.getMessage() + " for event: " + googleEvent.getTitle());
                    skippedCount++;
                }
            }

            SendMessage resultMessage = new SendMessage();
            resultMessage.setChatId(currentChatId.toString());
            resultMessage.setParseMode(null);
            resultMessage.setText(String.format("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n" +
                                             "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: %d\n" +
                                             "–ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞): %d", 
                                             syncedCount, skippedCount));
            executeSendMessage(resultMessage);

        } catch (UserNotAuthenticatedException e) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(currentChatId.toString());
            errorMessage.setParseMode(null);
            errorMessage.setText("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar. " +
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect_google_calendar –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
            executeSendMessage(errorMessage);
        } catch (IOException | GeneralSecurityException e) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(currentChatId.toString());
            errorMessage.setParseMode(null);
            errorMessage.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar: " + e.getMessage());
            executeSendMessage(errorMessage);
            System.err.println("[TelegramBotView] Error fetching events from Google Calendar for user " + currentChatId + ": " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(currentChatId.toString());
            errorMessage.setParseMode(null);
            errorMessage.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar: " + e.getMessage());
            executeSendMessage(errorMessage);
            System.err.println("[TelegramBotView] Unexpected error during Google Calendar sync for user " + currentChatId + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleGoogleCalendarList() {
        if (presenter == null || currentChatId == null) return;
        try {
            if (!(scheduleDAO instanceof GoogleCalendarDAO)) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ Google Calendar. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect_google_calendar"));
                return;
            }
            List<Event> googleEvents = scheduleDAO.getEvents(LocalDate.now(), LocalDate.now().plusDays(7), currentChatId);
            if (googleEvents.isEmpty()) {
                sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("–í –≤–∞—à–µ–º Google Calendar –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é."));
            } else {
                displayEvents(googleEvents, false, null);
            }
        } catch (UserNotAuthenticatedException e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ Google Calendar. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect_google_calendar"));
        } catch (Exception e) {
            System.err.println("[TelegramBotView] Error listing Google Calendar events: " + e.getMessage());
            e.printStackTrace();
            showErrorMessage("–û—à–∏–±–∫–∞ Google Calendar", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /disconnect_google_calendar –∏ /connect_google_calendar —Å–Ω–æ–≤–∞. " + e.getMessage());
        }
    }

    public void executeSendMessage(SendMessage message) {
        try {
            if (message.getParseMode() == null) {
            }
            execute(message);
            System.out.println("[TelegramBotView] Message sent to " + message.getChatId() + ": " + message.getText().lines().findFirst().orElse(""));
        } catch (TelegramApiException e) {
            System.err.println("[TelegramBotView] Error sending message: " + e.getMessage());
            if (e.getMessage() != null && e.getMessage().contains("parse")) {
                System.out.println("[TelegramBotView] Attempting to send fallback message (plain text).");
                try {
                    message.setParseMode(null);
                    message.setText(message.getText() + "\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–ø—Ä–æ—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]");
                    execute(message);
                } catch (TelegramApiException ex) {
                    System.err.println("[TelegramBotView] Error sending fallback message: " + ex.getMessage());
                }
            }
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("MarkdownV2");
        executeSendMessage(message);
    }

    private void sendMessageWithEntities(Long chatId, String text, List<MessageEntity> entities) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setEntities(entities);
        executeSendMessage(message);
    }

    private void sendMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("MarkdownV2");
        if (keyboard != null) {
            message.setReplyMarkup(keyboard);
        }
        executeSendMessage(message);
    }

    @Override
    public void displayEvents(List<Event> events, boolean isObservedView, Long targetOwnerIdIfObserved) {
        if (events.isEmpty()) {
            String message = isObservedView ? 
                templateService.getTemplate("observed_events_empty", 
                    "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π\\.") :
                templateService.getTemplate("event_list_empty", 
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π\\.");
            sendMessage(currentChatId, message);
            return;
        }

        String header = isObservedView ?
            templateService.getTemplate("observed_events_header", 
                "–°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID " + MarkdownFormatter.code(targetOwnerIdIfObserved.toString()) + ":") :
            templateService.getTemplate("event_list_header", 
                "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–±—ã—Ç–∏–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è_");
        sendMessage(currentChatId, header);

        for (Event event : events) {
            String eventText = formatEventText(event, isObservedView);
            InlineKeyboardMarkup keyboard = createEventKeyboard(event, isObservedView);
            sendMessageWithKeyboard(currentChatId, eventText, keyboard);
        }
    }

    String formatEventText(Event event, boolean isObservedView) {
        StringBuilder sb = new StringBuilder();
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        sb.append(MarkdownFormatter.bold(event.getTitle())).append("\n");
        
        // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        String startTime = DateTimeUtils.formatDateTime(event.getStartTime());
        String endTime = DateTimeUtils.formatDateTime(event.getEndTime());
        sb.append("üìÖ –ù–∞—á–∞–ª–æ: ").append(MarkdownFormatter.code(startTime)).append("\n");
        sb.append("‚åöÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: ").append(MarkdownFormatter.code(endTime)).append("\n");
        
        // –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (event.getDescription() != null && !event.getDescription().isEmpty()) {
            sb.append("üìù ").append(MarkdownFormatter.escapeMarkdownV2(event.getDescription())).append("\n");
        }
        
        // –ú–µ—Å—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (event.getLocation() != null && !event.getLocation().isEmpty()) {
            sb.append("üìç ").append(MarkdownFormatter.escapeMarkdownV2(event.getLocation())).append("\n");
        }
        
        // –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        String reminderStatus = event.isRemindersEnabled() ? "–í–ö–õ" : "–û–¢–ö–õ";
        sb.append("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ").append(MarkdownFormatter.code(reminderStatus));
        
        // –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if (event.getReminderTime() != null && event.isRemindersEnabled()) {
            String reminderTime = DateTimeUtils.formatDateTime(event.getReminderTime());
            sb.append(", ").append(MarkdownFormatter.code(reminderTime));
            if (event.isReminderSent()) {
                sb.append(" ").append(MarkdownFormatter.escapeMarkdownV2("(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)"));
            }
        }
        sb.append("\n");
        
        // ID —Å–æ–±—ã—Ç–∏—è
        sb.append("üÜî ").append(MarkdownFormatter.code(event.getId().toString()));
        
        return sb.toString();
    }

    private InlineKeyboardMarkup createEventKeyboard(Event event, boolean isObservedView) {
        if (event == null || event.getId() == null) {
            System.err.println("[TelegramBotView] Cannot create keyboard for null event or event with null ID");
            return null;
        }
        if (isObservedView) {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton detailsButton = new InlineKeyboardButton();
            detailsButton.setText("\uD83D\uDCD1 –î–µ—Ç–∞–ª–∏");
            String safeEventId = createSafeCallbackId(event.getId(), isObservedView);
            detailsButton.setCallbackData("d:" + safeEventId);
            row1.add(detailsButton);
            keyboard.add(row1);
            markup.setKeyboard(keyboard);
            return markup;
        }

        try {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            String safeEventId = createSafeCallbackId(event.getId(), false);

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton detailsButton = new InlineKeyboardButton();
            detailsButton.setText("\uD83D\uDCD1 –î–µ—Ç–∞–ª–∏"); 
            detailsButton.setCallbackData("d:" + safeEventId);
            row1.add(detailsButton);

            InlineKeyboardButton reminderTimeButton = new InlineKeyboardButton();
            reminderTimeButton.setText("‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º.");
            reminderTimeButton.setCallbackData("t:" + safeEventId);
            row1.add(reminderTimeButton);

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton toggleRemindersButton = new InlineKeyboardButton();
            toggleRemindersButton.setText((event.isRemindersEnabled() ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å") + " –Ω–∞–ø–æ–º.");
            toggleRemindersButton.setCallbackData("r:" + safeEventId + ":" + (event.isRemindersEnabled() ? "0" : "1"));
            row2.add(toggleRemindersButton);

            keyboard.add(row1);
            keyboard.add(row2);
            markup.setKeyboard(keyboard);

            return markup;
        } catch (Exception e) {
            System.err.println("[TelegramBotView] Error creating keyboard for event " + event.getId() + ": " + e.getMessage());
            return null;
        }
    }

    private final Map<String, String> callbackIdMap = new ConcurrentHashMap<>();
    private final Map<String, Boolean> callbackObservedFlagMap = new ConcurrentHashMap<>();

    private String createSafeCallbackId(String fullId, boolean isObservedView) {
        String shortId = fullId.substring(0, Math.min(12, fullId.length())) +
                         "_" + Long.toHexString(currentChatId != null ? currentChatId : 0L) +
                         "_" + (isObservedView ? "1" : "0"); 
        shortId = shortId.replaceAll("[^a-zA-Z0-9_]", "");
        if (shortId.length() > 60) {
            shortId = shortId.substring(0, 60);
        }
        callbackIdMap.put(shortId, fullId);
        callbackObservedFlagMap.put(shortId, isObservedView);
        return shortId;
    }

    private String getFullEventIdFromCallback(String shortId) {
        String fullId = callbackIdMap.get(shortId);
        if (fullId == null) {
            System.err.println("[TelegramBotView] Unknown short callback ID: " + shortId);
            throw new IllegalArgumentException("Unknown callback ID: " + shortId);
        }
        return fullId;
    }

    // private boolean isObservedFromCallback(String shortId) {
    //     return callbackObservedFlagMap.getOrDefault(shortId, false);
    // }

    @Override
    public void displayEventDetails(Event event) {
        if (currentChatId == null) {
            System.err.println("[TelegramBotView] No currentChatId to display event details.");
            return;
        }
        if (event == null) {
            sendDirectMessage(currentChatId, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        boolean isObserved = !currentChatId.equals(event.getOwnerChatId());

        String title = MarkdownFormatter.escapeMarkdownV2(event.getTitle());
        String description = MarkdownFormatter.escapeMarkdownV2(event.getDescription() != null && !event.getDescription().isEmpty() ? event.getDescription() : "–ù–µ—Ç");
        String startTime = MarkdownFormatter.escapeMarkdownV2(DateTimeUtils.formatMedium(event.getStartTime()));
        String endTime = MarkdownFormatter.escapeMarkdownV2(DateTimeUtils.formatMedium(event.getEndTime()));
        String location = MarkdownFormatter.escapeMarkdownV2(event.getLocation() != null && !event.getLocation().isEmpty() ? event.getLocation() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
        String eventId = MarkdownFormatter.escapeMarkdownV2(event.getId());
        String fmtdReminderStatus = MarkdownFormatter.escapeMarkdownV2(event.isRemindersEnabled() ? "–í–ö–õ" : "–û–¢–ö–õ");
        String fmtdReminderTime;
        String fmtdReminderSentInfo = "";

        if (event.isRemindersEnabled() && event.getReminderTime() != null) {
            fmtdReminderTime = MarkdownFormatter.escapeMarkdownV2(DateTimeUtils.formatMedium(event.getReminderTime()));
            String sentStatusText = event.isReminderSent() ? " (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)" : " (–û–∂–∏–¥–∞–µ—Ç—Å—è)";
            fmtdReminderSentInfo = MarkdownFormatter.escapeMarkdownV2(sentStatusText);
        } else if (event.isRemindersEnabled()) {
            fmtdReminderTime = MarkdownFormatter.escapeMarkdownV2("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            fmtdReminderSentInfo = MarkdownFormatter.escapeMarkdownV2(" (–û–∂–∏–¥–∞–µ—Ç—Å—è)");
        } else {
            fmtdReminderTime = MarkdownFormatter.escapeMarkdownV2("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω—ã)");
        }

        String ownerInfoSegment = "";
        if (isObserved) {
            ownerInfoSegment = String.format("\n–í–ª–∞–¥–µ–ª–µ—Ü: `%s`", MarkdownFormatter.escapeMarkdownV2(event.getOwnerChatId().toString()));
        }

        String details = String.format("*–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:*\n\n" +
                "üìù –ù–∞–∑–≤–∞–Ω–∏–µ: *%s*\n" +
                "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: `%s`\n" +
                "üìÖ –ù–∞—á–∞–ª–æ: `%s`\n" +
                "‚åöÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: `%s`\n" +
                "üìç –ú–µ—Å—Ç–æ: `%s`\n" +
                "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: `%s`\n" +
                "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: `%s`%s" +
                "%s\n" +
                "üÜî `%s`",
            title,
            description,
            startTime,
            endTime,
            location,
            fmtdReminderStatus,
            fmtdReminderTime,
            fmtdReminderSentInfo,
            ownerInfoSegment,
            eventId
        );

        sendMessage(currentChatId, details);
    }

    @Override
    public void showEventEditor(Event event) {
        if (currentChatId == null) return;
        sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ Telegram."));
    }

    @Override
    public void showErrorMessage(String title, String message) {
        System.err.println("[View] Displaying Error: " + title + " - " + message);
        String formattedMessage = String.format("*%s*\n\n%s",
            MarkdownFormatter.escapeMarkdownV2(title),
            MarkdownFormatter.escapeMarkdownV2(message));
        sendMessage(currentChatId, formattedMessage);
    }

    @Override
    public void showInfoMessage(String title, String message) {
        System.out.println("[View] Displaying Info: " + title + " - " + message);
        String formattedMessage = String.format("*%s*\n\n%s",
            MarkdownFormatter.escapeMarkdownV2(title),
            MarkdownFormatter.escapeMarkdownV2(message));
        sendMessage(currentChatId, formattedMessage);
    }

    @Override
    public boolean showConfirmationDialog(String title, String message) {
        System.out.println("[TelegramBotView] Confirmation requested: " + title + " - " + message + ". Auto-confirming for now for bot simplicity.");
        return true;
    }

    @Override
    public void setPresenter(MainPresenter presenter) {
        this.presenter = presenter;
        System.out.println("[TelegramBotView] Presenter set.");
    }

    public void registerBot() {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(this);
            System.out.println("[TelegramBotView] Bot registered successfully!");
        } catch (TelegramApiException e) {
            System.err.println("[TelegramBotView] Error registering bot: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void sendDirectMessage(Long chatId, String text) {
        if (chatId == null) {
            System.err.println("[TelegramBotView] Attempted to send direct message with null chatId.");
            return;
        }
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(MarkdownFormatter.escapeMarkdownV2(text));
        message.setParseMode("MarkdownV2");
        executeSendMessage(message);
    }

    private void handleCallbackQuery(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        // String messageId = callbackQuery.getMessage().getMessageId().toString();

        System.out.println("[TelegramBotView] Received callback query: " + callbackData);

        try {
            String[] parts = callbackData.split(":", 2);
            if (parts.length < 2) {
                throw new IllegalArgumentException("Invalid callback data format");
            }

            String action = parts[0];
            String shortId = parts[1];
            
            boolean enableReminders = false;
            if (action.equals("r")) {
                String[] reminderParts = parts[1].split(":");
                if (reminderParts.length != 2) {
                    throw new IllegalArgumentException("Invalid reminder toggle data");
                }
                shortId = reminderParts[0];
                enableReminders = reminderParts[1].equals("1");
            }

            String fullEventId = getFullEventIdFromCallback(shortId);
            Event event = presenter.getEventById(fullEventId, chatId);

            if (event == null) {
                sendDirectMessage(chatId, MarkdownFormatter.escapeMarkdownV2("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."));
                answerCallbackQuery(callbackQuery.getId(), "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                return;
            }

            switch (action) {
                case "d": // details
                    displayEventDetails(event);
                    answerCallbackQuery(callbackQuery.getId(), "–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è");
                    break;

                case "t": // reminder time
                    String eventTitleForDisplay = event.getTitle(); 
                    String eventIdForCommand = event.getId(); 
                    String exampleTimeForCommand = event.getStartTime().minusHours(1).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);

                    String command1Text = String.format("/set_reminder_time %s;YYYY-MM-DDThh:mm", eventIdForCommand);
                    String command2Text = String.format("/set_reminder_time %s;%s", eventIdForCommand, exampleTimeForCommand);
                    String command3Text = String.format("/set_reminder_time %s;null", eventIdForCommand);

                    StringBuilder sb = new StringBuilder();
                    sb.append(String.format("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è '%s'.\n\n", eventTitleForDisplay));
                    
                    sb.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n");
                    int cmd1Offset = sb.length();
                    sb.append(command1Text).append("\n\n");

                    sb.append("–ù–∞–ø—Ä–∏–º–µ—Ä (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n");
                    int cmd2Offset = sb.length();
                    sb.append(command2Text).append("\n\n");

                    sb.append("–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n");
                    int cmd3Offset = sb.length();
                    sb.append(command3Text);

                    String fullHelpText = sb.toString();
                    List<MessageEntity> entities = new ArrayList<>();

                    MessageEntity entity1 = new MessageEntity();
                    entity1.setType("bot_command");
                    entity1.setOffset(cmd1Offset);
                    entity1.setLength(command1Text.length());
                    entities.add(entity1);

                    MessageEntity entity2 = new MessageEntity();
                    entity2.setType("bot_command");
                    entity2.setOffset(cmd2Offset);
                    entity2.setLength(command2Text.length());
                    entities.add(entity2);

                    MessageEntity entity3 = new MessageEntity();
                    entity3.setType("bot_command");
                    entity3.setOffset(cmd3Offset);
                    entity3.setLength(command3Text.length());
                    entities.add(entity3);
                    
                    sendMessageWithEntities(chatId, fullHelpText, entities);
                    answerCallbackQuery(callbackQuery.getId(), "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
                    break;

                case "r": // toggle reminders
                    presenter.toggleEventRemindersRequested(fullEventId, enableReminders, chatId);
                    Event updatedEvent = presenter.getEventById(fullEventId, chatId);
                    if (updatedEvent != null) {
                        answerCallbackQuery(callbackQuery.getId(), 
                            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è " + (enableReminders ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã") + ". –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ /list_events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–Ω–æ–ø–∫–∞—Ö.");
                    } else {
                         answerCallbackQuery(callbackQuery.getId(), 
                            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è " + (enableReminders ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã") + ", –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏.");
                    }
                    break;

                default:
                    throw new IllegalArgumentException("Unknown action: " + action);
            }
        } catch (Exception e) {
            System.err.println("[TelegramBotView] Error handling callback query: " + e.getMessage());
            e.printStackTrace();
            sendDirectMessage(chatId, MarkdownFormatter.escapeMarkdownV2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."));
            answerCallbackQuery(callbackQuery.getId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void answerCallbackQuery(String callbackQueryId, String text) {
        org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery answer = 
            new org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackQueryId);
        answer.setText(text);
        try {
            execute(answer);
        } catch (TelegramApiException e) {
            System.err.println("[TelegramBotView] Error answering callback query: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleGrantViewAccessCommand(String args) {
        if (presenter == null || currentChatId == null) return;
        try {
            Long observerChatId = Long.parseLong(args.trim());
            presenter.grantViewAccess(currentChatId, observerChatId);
        } catch (NumberFormatException e) {
            sendDirectMessage(currentChatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.");
        } catch (Exception e) {
            sendDirectMessage(currentChatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: " + e.getMessage());
        }
    }

    private void handleListObservedEventsCommand(String args) {
        if (presenter == null || currentChatId == null) return;
        try {
            long targetOwnerId = Long.parseLong(args);
            presenter.loadObservedEvents(currentChatId, targetOwnerId);
        } catch (NumberFormatException e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."));
        } catch (Exception e) {
            sendMessage(currentChatId, MarkdownFormatter.escapeMarkdownV2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π: " + e.getMessage()));
        }
    }

    private void handleGetMyIdCommand() {
        String message = templateService.getTemplate("get_my_id", 
            "–í–∞—à Telegram ID: {id}\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\\.");
        sendMessage(currentChatId, message.replace("{id}", MarkdownFormatter.code(currentChatId.toString())));
    }

    private void handleAdminLogin(String code) {
        if (code == null || !code.equals(AppConfig.getAdminSecret())) {
            sendMessage(currentChatId, templateService.getTemplate("admin_login_fail", 
                "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\."));
            return;
        }
        adminChatIds.add(currentChatId);
        sendMessage(currentChatId, templateService.getTemplate("admin_login_success", 
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\\."));
    }

    private void handleAdminLogout() {
        if (!isAdmin(currentChatId)) {
            sendMessage(currentChatId, templateService.getTemplate("admin_no_access", 
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\\."));
            return;
        }
        adminChatIds.remove(currentChatId);
        sendMessage(currentChatId, templateService.getTemplate("admin_logout_success", 
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\."));
    }

    private boolean isAdmin(Long chatId) {
        if (chatId == null) return false;
        return adminChatIds.contains(chatId);
    }

    private void handleListTemplates() {
        if (!isAdmin(currentChatId)) {
            sendMessage(currentChatId, templateService.getTemplate("admin_no_access", 
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\\."));
            return;
        }

        Map<String, String> templates = templateService.getAllAvailableTemplates();
        if (templates.isEmpty()) {
            sendMessage(currentChatId, templateService.getTemplate("admin_list_templates_empty", 
                "–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\."));
            return;
        }

        StringBuilder message = new StringBuilder(MarkdownFormatter.bold("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:") + "\n");
        message.append(MarkdownFormatter.italic("(–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)") + "\n\n");

        for (Map.Entry<String, String> entry : templates.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            boolean isCustom = templateService.isCustomTemplate(key);

            message.append(MarkdownFormatter.code(key))
                  .append(" ")
                  .append(isCustom ? MarkdownFormatter.bold("(–∫–∞—Å—Ç–æ–º–Ω—ã–π)") : "")
                  .append("\n")
                  .append(MarkdownFormatter.codeBlock(value))
                  .append("\n\n");
        }

        sendMessage(currentChatId, message.toString());
    }

    private void handleSetTemplateCommand(String args) {
        if (!isAdmin(currentChatId)) {
            sendMessage(currentChatId, templateService.getTemplate("admin_no_access", 
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\\."));
            return;
        }
        String[] parts = args.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(currentChatId, templateService.getTemplate("admin_set_template_invalid_format", 
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set\\_template \\<key\\> \\<text\\>"));
            return;
        }
        String key = parts[0];
        if (key.startsWith("/")) {
            key = key.substring(1);
        }
        String text = parts[1];
        templateService.setTemplate(key, text);
        String successMessage = templateService.getTemplate("admin_set_template_success", 
            "–®–∞–±–ª–æ–Ω –¥–ª—è –∫–ª—é—á–∞ {key} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\\.");
        sendMessage(currentChatId, successMessage.replace("{key}", MarkdownFormatter.code(parts[0])));
    }

    private void handleResetTemplateCommand(String args) {
        if (!isAdmin(currentChatId)) {
            sendMessage(currentChatId, templateService.getTemplate("admin_no_access", 
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\\."));
            return;
        }
        if (args.trim().isEmpty()) {
            sendMessage(currentChatId, templateService.getTemplate("admin_reset_template_invalid_format", 
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reset\\_template \\<key\\>"));
            return;
        }
        String key = args.trim();
        String originalKey = key;
        if (key.startsWith("/")) {
            key = key.substring(1);
        }
        templateService.resetTemplate(key);
        String successMessage = templateService.getTemplate("admin_reset_template_success", 
            "–®–∞–±–ª–æ–Ω –¥–ª—è –∫–ª—é—á–∞ {key} —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\\.");
        sendMessage(currentChatId, successMessage.replace("{key}", MarkdownFormatter.code(originalKey)));
    }

    private void handleGetAnalysisCommand() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ –∏ –≤ –¥–µ–º–æ
            String dbPath = "data/events.db";
            Long ownerChatId = currentChatId;
            String outputPath = "analysis_" + ownerChatId + ".json";

            EventDAO eventDAO = new SQLiteEventDAO(dbPath);
            ScheduleAnalysisService analysisService = new ScheduleAnalysisServiceImpl(eventDAO);
            ScheduleAnalysis analysis = analysisService.analyzeCurrentWeek(ownerChatId);

            AnalysisExportDAO exportDAO = new JsonAnalysisExportDAO();
            exportDAO.exportAnalysis(analysis, outputPath);

            sendDocument(currentChatId, outputPath, "–í–∞—à –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (JSON):");
        } catch (Exception e) {
            sendMessage(currentChatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: " + e.getMessage());
        }
    }

    private void sendDocument(Long chatId, String filePath, String caption) {
        try {
            SendDocument sendDocumentRequest = new SendDocument();
            sendDocumentRequest.setChatId(chatId.toString());
            sendDocumentRequest.setDocument(new InputFile(new java.io.File(filePath)));
            sendDocumentRequest.setCaption(caption);
            execute(sendDocumentRequest);
        } catch (TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
}