package service.impl;

import model.Event;
import service.EventService;
import service.ReminderService;
import telegram.TelegramBotView; // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import util.DateTimeUtils;
import util.MarkdownFormatter;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ReminderServiceImpl implements ReminderService {

    private final EventService eventService; // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
    private TelegramBotView telegramBotView; // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    private ScheduledExecutorService scheduler;
    // private boolean running = false;

    // –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    private static final long CHECK_INTERVAL_MINUTES = 1;

    public ReminderServiceImpl(EventService eventService) {
        this.eventService = eventService;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ View (–∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    public void setTelegramBotView(TelegramBotView telegramBotView) {
        this.telegramBotView = telegramBotView;
    }

    @Override
    public void start() {
        if (scheduler != null && !scheduler.isShutdown()) {
            System.out.println("[ReminderService] Already started.");
            return;
        }
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(this::checkForUpcomingReminders, 0, CHECK_INTERVAL_MINUTES, TimeUnit.MINUTES);
        System.out.println("[ReminderService] Started. Checking every " + CHECK_INTERVAL_MINUTES + " minute(s).");
    }

    @Override
    public void stop() {
        if (scheduler != null) {
            scheduler.shutdown();
            try {
                if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                    scheduler.shutdownNow();
                }
            } catch (InterruptedException e) {
                scheduler.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
        System.out.println("[ReminderService] Stopped.");
    }

    private void checkForUpcomingReminders() {
        if (telegramBotView == null) {
            // System.err.println("[ReminderService] TelegramBotView is not set. Cannot send reminders.");
            return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ View –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        }
        // System.out.println("[ReminderService] Checking for upcoming reminders... (" + LocalDateTime.now() + ")");
        List<Event> allEvents = eventService.getAllEventsGlobally();
        LocalDateTime now = LocalDateTime.now();

        for (Event event : allEvents) {
            if (event.isRemindersEnabled() && event.getReminderTime() != null && !event.isReminderSent()) {
                if (now.isEqual(event.getReminderTime()) || now.isAfter(event.getReminderTime())) {
                    sendReminderNotification(event);
                    event.setReminderSent(true);
                    try {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º ownerChatId –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        eventService.updateEvent(event, event.getOwnerChatId()); 
                    } catch (Exception e) {
                        System.err.println("[ReminderService] Failed to mark reminder as sent for event ID: " + event.getId() + " - " + e.getMessage());
                        // –ú–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å event.setReminderSent(false) –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ª–æ–≥–∏–∫—É
                    }
                }
            }
        }
    }

    private void sendReminderNotification(Event event) {
        if (telegramBotView == null) return;
        
        Long recipientChatId = event.getOwnerChatId();
        if (recipientChatId == null) {
            System.out.println("[ReminderService] Reminder for event '" + event.getTitle() + "' has no ownerChatId. Cannot send notification.");
            return;
        }

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
        String eventTitle = MarkdownFormatter.escapeMarkdownV2(event.getTitle());
        String startTime = MarkdownFormatter.escapeMarkdownV2(DateTimeUtils.formatMedium(event.getStartTime()));
        String endTime = MarkdownFormatter.escapeMarkdownV2(DateTimeUtils.formatMedium(event.getEndTime()));
        
        String description = "";
        if (event.getDescription() != null && !event.getDescription().isEmpty()) {
            description = "\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: _" + MarkdownFormatter.escapeMarkdownV2(event.getDescription()) + "_";
        }
        
        String location = "";
        if (event.getLocation() != null && !event.getLocation().isEmpty()) {
            location = "\nüìç –ú–µ—Å—Ç–æ: _" + MarkdownFormatter.escapeMarkdownV2(event.getLocation()) + "_";
        }

        StringBuilder messageText = new StringBuilder();
        messageText.append("üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏\\!*\n\n");
        messageText.append("*").append(eventTitle).append("*\n\n");
        messageText.append("üìÖ –ù–∞—á–∞–ª–æ: ").append(startTime).append("\n");
        messageText.append("‚åöÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: ").append(endTime);
        messageText.append(description); // –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç \n, –µ—Å–ª–∏ –µ—Å—Ç—å
        messageText.append(location);    // –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç \n, –µ—Å–ª–∏ –µ—Å—Ç—å

        SendMessage message = new SendMessage();
        message.setChatId(recipientChatId.toString());
        message.setParseMode("MarkdownV2");
        message.setText(messageText.toString());

        try {
            telegramBotView.executeSendMessage(message);
            System.out.println("[ReminderService] Reminder notification sent successfully to chatId: " + recipientChatId);
        } catch (Exception e) {
            System.err.println("[ReminderService] Failed to send reminder notification: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 